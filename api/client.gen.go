// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateSoundsWithBody request with any body
	CreateSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSounds(ctx context.Context, body CreateSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaylists request
	GetPlaylists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlaylistsWithBody request with any body
	CreatePlaylistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlaylists(ctx context.Context, body CreatePlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSounds request
	GetSounds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecommendedSounds request
	GetRecommendedSounds(ctx context.Context, params *GetRecommendedSoundsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSound request
	GetSound(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSoundsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSounds(ctx context.Context, body CreateSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSoundsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaylists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaylistsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaylistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaylistsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlaylists(ctx context.Context, body CreatePlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaylistsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSounds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSoundsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecommendedSounds(ctx context.Context, params *GetRecommendedSoundsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecommendedSoundsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSound(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSoundRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateSoundsRequest calls the generic CreateSounds builder with application/json body
func NewCreateSoundsRequest(server string, body CreateSoundsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSoundsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSoundsRequestWithBody generates requests for CreateSounds with any type of body
func NewCreateSoundsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/sounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlaylistsRequest generates requests for GetPlaylists
func NewGetPlaylistsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlaylistsRequest calls the generic CreatePlaylists builder with application/json body
func NewCreatePlaylistsRequest(server string, body CreatePlaylistsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlaylistsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlaylistsRequestWithBody generates requests for CreatePlaylists with any type of body
func NewCreatePlaylistsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSoundsRequest generates requests for GetSounds
func NewGetSoundsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecommendedSoundsRequest generates requests for GetRecommendedSounds
func NewGetRecommendedSoundsRequest(server string, params *GetRecommendedSoundsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds/recommended")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PlaylistId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "playlistId", runtime.ParamLocationQuery, *params.PlaylistId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSoundRequest generates requests for GetSound
func NewGetSoundRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateSoundsWithBodyWithResponse request with any body
	CreateSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSoundsResponse, error)

	CreateSoundsWithResponse(ctx context.Context, body CreateSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSoundsResponse, error)

	// GetPlaylistsWithResponse request
	GetPlaylistsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlaylistsResponse, error)

	// CreatePlaylistsWithBodyWithResponse request with any body
	CreatePlaylistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaylistsResponse, error)

	CreatePlaylistsWithResponse(ctx context.Context, body CreatePlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlaylistsResponse, error)

	// GetSoundsWithResponse request
	GetSoundsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSoundsResponse, error)

	// GetRecommendedSoundsWithResponse request
	GetRecommendedSoundsWithResponse(ctx context.Context, params *GetRecommendedSoundsParams, reqEditors ...RequestEditorFn) (*GetRecommendedSoundsResponse, error)

	// GetSoundWithResponse request
	GetSoundWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSoundResponse, error)
}

type CreateSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaylistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlaylistResponse
}

// Status returns HTTPResponse.Status
func (r GetPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlaylistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundResponse
}

// Status returns HTTPResponse.Status
func (r GetSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecommendedSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundResponse
}

// Status returns HTTPResponse.Status
func (r GetRecommendedSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecommendedSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundResponse
}

// Status returns HTTPResponse.Status
func (r GetSoundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateSoundsWithBodyWithResponse request with arbitrary body returning *CreateSoundsResponse
func (c *ClientWithResponses) CreateSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSoundsResponse, error) {
	rsp, err := c.CreateSoundsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSoundsResponse(rsp)
}

func (c *ClientWithResponses) CreateSoundsWithResponse(ctx context.Context, body CreateSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSoundsResponse, error) {
	rsp, err := c.CreateSounds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSoundsResponse(rsp)
}

// GetPlaylistsWithResponse request returning *GetPlaylistsResponse
func (c *ClientWithResponses) GetPlaylistsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlaylistsResponse, error) {
	rsp, err := c.GetPlaylists(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaylistsResponse(rsp)
}

// CreatePlaylistsWithBodyWithResponse request with arbitrary body returning *CreatePlaylistsResponse
func (c *ClientWithResponses) CreatePlaylistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaylistsResponse, error) {
	rsp, err := c.CreatePlaylistsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaylistsResponse(rsp)
}

func (c *ClientWithResponses) CreatePlaylistsWithResponse(ctx context.Context, body CreatePlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlaylistsResponse, error) {
	rsp, err := c.CreatePlaylists(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaylistsResponse(rsp)
}

// GetSoundsWithResponse request returning *GetSoundsResponse
func (c *ClientWithResponses) GetSoundsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSoundsResponse, error) {
	rsp, err := c.GetSounds(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundsResponse(rsp)
}

// GetRecommendedSoundsWithResponse request returning *GetRecommendedSoundsResponse
func (c *ClientWithResponses) GetRecommendedSoundsWithResponse(ctx context.Context, params *GetRecommendedSoundsParams, reqEditors ...RequestEditorFn) (*GetRecommendedSoundsResponse, error) {
	rsp, err := c.GetRecommendedSounds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecommendedSoundsResponse(rsp)
}

// GetSoundWithResponse request returning *GetSoundResponse
func (c *ClientWithResponses) GetSoundWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSoundResponse, error) {
	rsp, err := c.GetSound(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundResponse(rsp)
}

// ParseCreateSoundsResponse parses an HTTP response from a CreateSoundsWithResponse call
func ParseCreateSoundsResponse(rsp *http.Response) (*CreateSoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlaylistsResponse parses an HTTP response from a GetPlaylistsWithResponse call
func ParseGetPlaylistsResponse(rsp *http.Response) (*GetPlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaylistResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePlaylistsResponse parses an HTTP response from a CreatePlaylistsWithResponse call
func ParseCreatePlaylistsResponse(rsp *http.Response) (*CreatePlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSoundsResponse parses an HTTP response from a GetSoundsWithResponse call
func ParseGetSoundsResponse(rsp *http.Response) (*GetSoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecommendedSoundsResponse parses an HTTP response from a GetRecommendedSoundsWithResponse call
func ParseGetRecommendedSoundsResponse(rsp *http.Response) (*GetRecommendedSoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecommendedSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSoundResponse parses an HTTP response from a GetSoundWithResponse call
func ParseGetSoundResponse(rsp *http.Response) (*GetSoundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSoundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
